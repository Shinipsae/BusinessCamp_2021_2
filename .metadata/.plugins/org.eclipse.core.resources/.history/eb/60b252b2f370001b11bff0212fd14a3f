package com.example.settingweb_boot.service;

import java.util.LinkedHashMap;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.example.settingweb_boot.dao.StatisticMapper;

@Service
public class StatisticServiceImpl implements StatisticService {

	@Autowired
	private StatisticMapper uMapper;

	// 해당년도의 로그인 수
	@Override
	public LinkedHashMap<String, Object> yearloginNum(String year) {
		// JSON을 만들기 위해 HashMap 형태로 return함
		LinkedHashMap<String, Object> retVal = new LinkedHashMap<String, Object>();

		try { // 쿼리로 가져온 cnt 값으로 json 값을 만듦
			retVal = uMapper.selectYearLogin(year);
			retVal.put("year", year);
			retVal.put("is_success", true);

		} catch (Exception e) {
			retVal.put("totCnt", -999);
			retVal.put("year", year);
			retVal.put("is_success", false);
		}

		return retVal;
	}

	// 월별 접속자 수
	@Override
	public LinkedHashMap<String, Object> selectMonth(String yearMonth) {
		String year = yearMonth.substring(0, 2);
		String month = yearMonth.substring(2);

		// JSON을 만들기 위해 HashMap 형태로 return함
		LinkedHashMap<String, Object> retVal = new LinkedHashMap<String, Object>();

		try { // 쿼리로 가져온 cnt 값으로 json 값을 만듦
			retVal = uMapper.selectMonth(yearMonth);
			retVal.put("year", year);
			retVal.put("month", month);
			retVal.put("is_success", true);

		} catch (Exception e) {
			retVal.put("monthCnt", -999);
			retVal.put("year", year);
			retVal.put("month", month);
			retVal.put("is_success", false);
		}

		return retVal;
	}

	// 일별 접속자 수
	@Override
	public LinkedHashMap<String, Object> selectDate(String yearMonthDate) {
		String year = yearMonthDate.substring(0, 2);
		String month = yearMonthDate.substring(2, 4);
		String date = yearMonthDate.substring(4);

		// JSON을 만들기 위해 HashMap 형태로 return함
		LinkedHashMap<String, Object> retVal = new LinkedHashMap<String, Object>();

		try { // 쿼리로 가져온 cnt 값으로 json 값을 만듦
			retVal = uMapper.selectDate(yearMonthDate);
			retVal.put("year", year);
			retVal.put("month", month);
			retVal.put("date", date);
			retVal.put("is_success", true);

		} catch (Exception e) {
			retVal.put("dateCnt", -999);
			retVal.put("year", year);
			retVal.put("month", month);
			retVal.put("date", date);
			retVal.put("is_success", false);
		}

		return retVal;
	}

	// 평균 하루 로그인 수 (월 기준)
	@Override
	public LinkedHashMap<String, Object> avgDay(String yearMonth) {
		String year = yearMonth.substring(0, 2);
		String month = yearMonth.substring(2);

		// JSON을 만들기 위해 (Linked)HashMap 형태로 return함
		LinkedHashMap<String, Object> retVal = new LinkedHashMap<String, Object>();

		try { // 쿼리로 가져온 cnt 값으로 json 값을 만듦
			retVal = uMapper.avgDay(yearMonth);
			retVal.put("year", year);
			retVal.put("month", month);
			retVal.put("is_success", true);
			
			// 월을 구해서 나누어 평균을 구함
			long total = (long)retVal.get("loginAvg");
			
			if((Integer.parseInt(year) + 2000) % 4 == 0) { // 윤년이면
				month = "022";
			}
			
			switch (month) {
				case "01": case "03": case "05": case "07":
				case "08": case "10": case "12": total /= 31.0; break; // 31일인 달
				case "04": case "06": case "09": case "11": total /= 30.0; break; // 30일인 달
				case "02": total /= 28.0; break; // 2월
				case "022": total /= 29.0; break; // 윤년 2월은 29일
				default: total = 0;
			}
			
			Object avg = (Object)total;
			retVal.put("loginAvg", avg);

		} catch (Exception e) {
			retVal.put("loginAvg", -999);
			retVal.put("year", year);
			retVal.put("month", month);
			retVal.put("is_success", false);
			e.printStackTrace();
		}

		return retVal;

	}

	@Override
	public LinkedHashMap<String, Object> selectmonthLogin(String month) {

		return null;
	}

	// 부서별 월별 로그인 수
	@Override
	public LinkedHashMap<String, Object> selectOrgLogin(String yearMonth, String org) {
		String year = yearMonth.substring(0, 2);
		String month = yearMonth.substring(2);

		// JSON을 만들기 위해 HashMap 형태로 return함
		LinkedHashMap<String, Object> retVal = new LinkedHashMap<String, Object>();

		try { // 쿼리로 가져온 cnt 값으로 json 값을 만듦
			retVal = uMapper.selectOrgLogin(yearMonth, org);
			retVal.put("year", year);
			retVal.put("month", month);
			retVal.put("org", org);
			retVal.put("is_success", true);

		} catch (Exception e) {
			retVal.put("monthCnt", -999);
			retVal.put("year", year);
			retVal.put("month", month);
			retVal.put("org", org);
			retVal.put("is_success", false);
		}

		return retVal;
	}

}